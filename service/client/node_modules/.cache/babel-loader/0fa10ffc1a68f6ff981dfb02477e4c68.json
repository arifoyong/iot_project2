{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/components/Line.js\";\nimport React from \"react\";\nimport Chart from \"chart.js\";\n\nclass Line extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.drawLineChart = () => {\n      const wh = this.state.width;\n      const breakPoint = 480;\n      const fs = wh > breakPoint ? 12 : 8;\n      this.lineChart = new Chart(this.chartRef.current.getContext(\"2d\"), {\n        type: \"line\",\n        data: {\n          datasets: this.props.tempData\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          legend: {\n            display: wh > breakPoint ? true : false,\n            position: \"bottom\",\n            fontSize: fs\n          },\n          title: {\n            display: true,\n            text: this.props.title,\n            fontSize: fs * 1.2\n          },\n          scales: {\n            xAxes: [{\n              type: \"time\",\n              time: {\n                unit: 'hour',\n                unitStepSize: 0.5,\n                round: 'hour',\n                tooltipFormat: \"h:mm:ss a\",\n                displayFormats: {\n                  hour: 'MMM D, h:mm a'\n                }\n              },\n              ticks: {\n                fontSize: fs,\n                minRotation: 0,\n                maxRotation: 12\n              }\n            }],\n            yAxes: [{\n              type: 'linear',\n              ticks: {\n                min: this.props.yMin,\n                max: this.props.yMax,\n                fontSize: fs\n              },\n              scaleLabel: {\n                display: true,\n                labelString: this.props.yLabel,\n                fontSize: fs\n              }\n            }]\n          }\n        }\n      });\n    };\n\n    this.state = {\n      width: 0,\n      height: 0\n    };\n    this.chartRef = React.createRef();\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.drawLineChart();\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"canvas-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      style: {// \"minHeight\": \"100%\",\n        // \"minWidth\": \"70%\"\n      },\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Line;","map":{"version":3,"sources":["/usr/src/app/client/src/components/Line.js"],"names":["React","Chart","Line","Component","constructor","props","drawLineChart","wh","state","width","breakPoint","fs","lineChart","chartRef","current","getContext","type","data","datasets","tempData","options","responsive","maintainAspectRatio","legend","display","position","fontSize","title","text","scales","xAxes","time","unit","unitStepSize","round","tooltipFormat","displayFormats","hour","ticks","minRotation","maxRotation","yAxes","min","yMin","max","yMax","scaleLabel","labelString","yLabel","height","createRef","updateWindowDimensions","bind","componentDidUpdate","componentDidMount","window","addEventListener","setState","innerWidth","innerHeight","componentWillUnmount","removeEventListener","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyBnBC,aAzBmB,GAyBH,MAAM;AACpB,YAAMC,EAAE,GAAG,KAAKC,KAAL,CAAWC,KAAtB;AACA,YAAMC,UAAU,GAAG,GAAnB;AACA,YAAMC,EAAE,GAAGJ,EAAE,GAAGG,UAAL,GAAkB,EAAlB,GAAuB,CAAlC;AAEA,WAAKE,SAAL,GAAiB,IAAIX,KAAJ,CAAU,KAAKY,QAAL,CAAcC,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAV,EAAkD;AACjEC,QAAAA,IAAI,EAAE,MAD2D;AAEjEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWc;AAAvB,SAF2D;AAGjEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,UAAU,EAAE,IADL;AAEPC,UAAAA,mBAAmB,EAAE,IAFd;AAGPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAEjB,EAAE,GAAGG,UAAL,GAAkB,IAAlB,GAAyB,KAD5B;AAENe,YAAAA,QAAQ,EAAE,QAFJ;AAGNC,YAAAA,QAAQ,EAAEf;AAHJ,WAHD;AAQPgB,UAAAA,KAAK,EAAE;AACLH,YAAAA,OAAO,EAAE,IADJ;AAELI,YAAAA,IAAI,EAAE,KAAKvB,KAAL,CAAWsB,KAFZ;AAGLD,YAAAA,QAAQ,EAAEf,EAAE,GAAG;AAHV,WARA;AAaPkB,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,CAAC;AACNd,cAAAA,IAAI,EAAE,MADA;AAENe,cAAAA,IAAI,EAAE;AACJC,gBAAAA,IAAI,EAAE,MADF;AAEJC,gBAAAA,YAAY,EAAE,GAFV;AAGJC,gBAAAA,KAAK,EAAE,MAHH;AAIJC,gBAAAA,aAAa,EAAE,WAJX;AAKJC,gBAAAA,cAAc,EAAE;AACdC,kBAAAA,IAAI,EAAE;AADQ;AALZ,eAFA;AAWNC,cAAAA,KAAK,EAAE;AACLZ,gBAAAA,QAAQ,EAAEf,EADL;AAEL4B,gBAAAA,WAAW,EAAE,CAFR;AAGLC,gBAAAA,WAAW,EAAE;AAHR;AAXD,aAAD,CADD;AAkBNC,YAAAA,KAAK,EAAE,CAAC;AACNzB,cAAAA,IAAI,EAAE,QADA;AAENsB,cAAAA,KAAK,EAAE;AACLI,gBAAAA,GAAG,EAAE,KAAKrC,KAAL,CAAWsC,IADX;AAELC,gBAAAA,GAAG,EAAE,KAAKvC,KAAL,CAAWwC,IAFX;AAGLnB,gBAAAA,QAAQ,EAAEf;AAHL,eAFD;AAONmC,cAAAA,UAAU,EAAE;AACVtB,gBAAAA,OAAO,EAAE,IADC;AAEVuB,gBAAAA,WAAW,EAAE,KAAK1C,KAAL,CAAW2C,MAFd;AAGVtB,gBAAAA,QAAQ,EAAEf;AAHA;AAPN,aAAD;AAlBD;AAbD;AAHwD,OAAlD,CAAjB;AAmDD,KAjFkB;;AAEjB,SAAKH,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYwC,MAAAA,MAAM,EAAE;AAApB,KAAb;AAEA,SAAKpC,QAAL,GAAgBb,KAAK,CAACkD,SAAN,EAAhB;AACA,SAAKC,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BC,IAA5B,CAAiC,IAAjC,CAA9B;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAK/C,aAAL;AACD;;AAEDgD,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,sBAAL;AACAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,sBAAvC;AACD;;AAEDA,EAAAA,sBAAsB,GAAG;AACvB,SAAKM,QAAL,CAAc;AAAEhD,MAAAA,KAAK,EAAE8C,MAAM,CAACG,UAAhB;AAA4BT,MAAAA,MAAM,EAAEM,MAAM,CAACI;AAA3C,KAAd;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBL,IAAAA,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqC,KAAKV,sBAA1C;AACD;;AA4DDW,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,KAAK,EAAE,CAC1B;AACA;AAF0B,OAA5B;AAIE,MAAA,GAAG,EAAE,KAAKjD,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAUD;;AA/FgC;;AAkGnC,eAAeX,IAAf","sourcesContent":["import React from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nclass Line extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { width: 0, height: 0 };\r\n\r\n    this.chartRef = React.createRef();\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawLineChart();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  drawLineChart = () => {\r\n    const wh = this.state.width\r\n    const breakPoint = 480\r\n    const fs = wh > breakPoint ? 12 : 8\r\n\r\n    this.lineChart = new Chart(this.chartRef.current.getContext(\"2d\"), {\r\n      type: \"line\",\r\n      data: { datasets: this.props.tempData },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: true,\r\n        legend: {\r\n          display: wh > breakPoint ? true : false,\r\n          position: \"bottom\",\r\n          fontSize: fs,\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: this.props.title,\r\n          fontSize: fs * 1.2\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            type: \"time\",\r\n            time: {\r\n              unit: 'hour',\r\n              unitStepSize: 0.5,\r\n              round: 'hour',\r\n              tooltipFormat: \"h:mm:ss a\",\r\n              displayFormats: {\r\n                hour: 'MMM D, h:mm a'\r\n              }\r\n            },\r\n            ticks: {\r\n              fontSize: fs,\r\n              minRotation: 0,\r\n              maxRotation: 12\r\n            }\r\n          }],\r\n          yAxes: [{\r\n            type: 'linear',\r\n            ticks: {\r\n              min: this.props.yMin,\r\n              max: this.props.yMax,\r\n              fontSize: fs\r\n            },\r\n            scaleLabel: {\r\n              display: true,\r\n              labelString: this.props.yLabel,\r\n              fontSize: fs\r\n            }\r\n          }]\r\n        }\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"canvas-holder\">\r\n        <canvas id=\"myChart\" style={{\r\n          // \"minHeight\": \"100%\",\r\n          // \"minWidth\": \"70%\"\r\n        }\r\n        } ref={this.chartRef} />\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Line;\r\n"]},"metadata":{},"sourceType":"module"}