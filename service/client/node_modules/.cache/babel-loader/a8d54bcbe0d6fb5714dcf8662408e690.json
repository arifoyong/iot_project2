{"ast":null,"code":"import _slicedToArray from\"D:\\\\MyLab\\\\iot_project\\\\service\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import Container from'react-bootstrap/Container';import Row from'react-bootstrap/Row';import Col from'react-bootstrap/Col';import Card from'react-bootstrap/Card';var io=require('socket.io-client');// const socket = io('http://localhost:8001');\nvar socket=io('/');var URI='/api/record/lastrecord';var formatDate=function formatDate(dateString){var d=new Date(dateString);var monthNames=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];var minutes=d.getMinutes()<10?'0'+d.getMinutes():d.getMinutes();return d.getDate()+\"-\"+monthNames[d.getMonth()]+\"-\"+d.getFullYear()+\" \"+d.getHours()+\":\"+minutes;};var displayCard=function displayCard(dt,index){return React.createElement(Col,{key:index,xs:12,md:6,lg:4},React.createElement(Card,null,React.createElement(Link,{className:\"btn btn-primary\",to:{pathname:\"/graph/\".concat(dt.deviceId)}},React.createElement(Card.Header,null,\"ID: \",dt.deviceId,\" @ \",dt.Device.location)),React.createElement(Card.Body,null,React.createElement(Row,null,React.createElement(Col,null,React.createElement(Card.Text,null,\"Temperature\"),React.createElement(Card.Text,null,dt.temp,\"\\xB0C\")),React.createElement(Col,null,React.createElement(Card.Text,null,\"Humidity\"),React.createElement(Card.Text,null,dt.humi,\"%\"))),React.createElement(Row,null,React.createElement(Col,null,React.createElement(Card.Text,{className:\"last-update-time\"},\"Last update: \",formatDate(dt.recordDate)))))));};function Dashboard(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];useEffect(function(){fetch(URI).then(function(res){return res.json();}).then(function(json){setData(json);});},[]);useEffect(function(){socket.on('new_record',function(payload){fetch(URI).then(function(res){return res.json();}).then(function(json){setData(json);});});});return React.createElement(Container,null,React.createElement(Row,null,data.map(function(data,index){return displayCard(data,index);})));}export default Dashboard;","map":{"version":3,"sources":["D:/MyLab/iot_project/service/client/src/components/Dashboard.js"],"names":["React","useState","useEffect","Link","Container","Row","Col","Card","io","require","socket","URI","formatDate","dateString","d","Date","monthNames","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","displayCard","dt","index","pathname","deviceId","Device","location","temp","humi","recordDate","Dashboard","data","setData","fetch","then","res","json","on","payload","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst io = require('socket.io-client');\r\n// const socket = io('http://localhost:8001');\r\nconst socket = io('/');\r\n\r\nconst URI = '/api/record/lastrecord'\r\n\r\nconst formatDate = (dateString) => {\r\n  const d = new Date(dateString)\r\n  const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\",\r\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\r\n    \"Aug\", \"Sep\", \"Oct\",\r\n    \"Nov\", \"Dec\"\r\n  ]\r\n  const minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\r\n  return d.getDate() + \"-\" + monthNames[d.getMonth()] + \"-\" + d.getFullYear() + \" \" + d.getHours() + \":\" + minutes\r\n}\r\n\r\nconst displayCard = (dt, index) => {\r\n  return (\r\n    <Col key={index} xs={12} md={6} lg={4}>\r\n      <Card>\r\n        <Link className=\"btn btn-primary\" to={{ pathname: `/graph/${dt.deviceId}` }}>\r\n          <Card.Header>ID: {dt.deviceId} @ {dt.Device.location}</Card.Header>\r\n        </Link>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col>\r\n              <Card.Text>Temperature</Card.Text>\r\n              <Card.Text>{dt.temp}&deg;C</Card.Text>\r\n            </Col>\r\n            <Col>\r\n              <Card.Text>Humidity</Card.Text>\r\n              <Card.Text>{dt.humi}%</Card.Text>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Card.Text className=\"last-update-time\">\r\n                Last update: {formatDate(dt.recordDate)}\r\n              </Card.Text>\r\n\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n\r\n  )\r\n}\r\n\r\nfunction Dashboard() {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    fetch(URI).then(res => res.json())\r\n      .then(json => {\r\n        setData(json)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    socket.on('new_record', (payload) => {\r\n      fetch(URI).then(res => res.json())\r\n        .then(json => {\r\n          setData(json)\r\n        })\r\n    });\r\n\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {data.map((data, index) => displayCard(data, index))}\r\n      </Row>\r\n    </Container>\r\n\r\n  )\r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}