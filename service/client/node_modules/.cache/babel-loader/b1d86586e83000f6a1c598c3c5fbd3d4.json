{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/usr/src/app/client/src/components/Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\nconst io = require('socket.io-client');\n\nconst socket = io('http://localhost:8001');\nconst URI = '/api/record/lastrecord';\n\nconst formatDate = dateString => {\n  const d = new Date(dateString);\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n  return d.getDate() + \"-\" + monthNames[d.getMonth()] + \"-\" + d.getFullYear() + \" \" + d.getHours() + \":\" + minutes;\n};\n\nconst displayCard = (dt, index) => {\n  return React.createElement(Col, {\n    key: index,\n    xs: 12,\n    md: 6,\n    lg: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Link, {\n    className: \"btn btn-primary\",\n    to: {\n      pathname: \"/graph/\".concat(dt.deviceId)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Card.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"ID: \", dt.deviceId, \" @ \", dt.Device.location)), React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Temperature\"), React.createElement(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, dt.temp, \"\\xB0C\")), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Humidity\"), React.createElement(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, dt.humi, \"%\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Card.Text, {\n    className: \"last-update-time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Last update: \", formatDate(dt.recordDate)))))));\n};\n\nfunction Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  useEffect(() => {\n    fetch(URI).then(res => res.json()).then(json => {\n      setData(json);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('new_record', () => {\n      fetch(URI).then(res => res.json()).then(json => {\n        setData(json);\n      });\n    });\n    console.log('new_reocrd');\n  });\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, data.map((data, index) => displayCard(data, index))));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/usr/src/app/client/src/components/Dashboard.js"],"names":["React","useState","useEffect","Link","Container","Row","Col","Card","io","require","socket","URI","formatDate","dateString","d","Date","monthNames","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","displayCard","dt","index","pathname","deviceId","Device","location","temp","humi","recordDate","Dashboard","data","setData","fetch","then","res","json","on","console","log","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGF,EAAE,CAAC,uBAAD,CAAjB;AAEA,MAAMG,GAAG,GAAG,wBAAZ;;AAEA,MAAMC,UAAU,GAAIC,UAAD,IAAgB;AACjC,QAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,UAAT,CAAV;AACA,QAAMG,UAAU,GAAG,CACjB,KADiB,EACV,KADU,EACH,KADG,EAEjB,KAFiB,EAEV,KAFU,EAEH,KAFG,EAEI,KAFJ,EAGjB,KAHiB,EAGV,KAHU,EAGH,KAHG,EAIjB,KAJiB,EAIV,KAJU,CAAnB;AAMA,QAAMC,OAAO,GAAGH,CAAC,CAACI,UAAF,KAAiB,EAAjB,GAAsB,MAAMJ,CAAC,CAACI,UAAF,EAA5B,GAA6CJ,CAAC,CAACI,UAAF,EAA7D;AACA,SAAOJ,CAAC,CAACK,OAAF,KAAc,GAAd,GAAoBH,UAAU,CAACF,CAAC,CAACM,QAAF,EAAD,CAA9B,GAA+C,GAA/C,GAAqDN,CAAC,CAACO,WAAF,EAArD,GAAuE,GAAvE,GAA6EP,CAAC,CAACQ,QAAF,EAA7E,GAA4F,GAA5F,GAAkGL,OAAzG;AACD,CAVD;;AAYA,MAAMM,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe;AACjC,SACE,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAiB,IAAA,EAAE,EAAE,EAArB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAgC,IAAA,EAAE,EAAE,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAkC,IAAA,EAAE,EAAE;AAAEC,MAAAA,QAAQ,mBAAYF,EAAE,CAACG,QAAf;AAAV,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAkBH,EAAE,CAACG,QAArB,SAAkCH,EAAE,CAACI,MAAH,CAAUC,QAA5C,CADF,CADF,EAIE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYL,EAAE,CAACM,IAAf,UAFF,CADF,EAKE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYN,EAAE,CAACO,IAAf,MAFF,CALF,CADF,EAWE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,SAAS,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBnB,UAAU,CAACY,EAAE,CAACQ,UAAJ,CAD1B,CADF,CADF,CAXF,CAJF,CADF,CADF;AA8BD,CA/BD;;AAiCA,SAASC,SAAT,GAAqB;AAAA,oBACKhC,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,QACZiC,IADY;AAAA,QACNC,OADM;;AAGnBjC,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,KAAK,CAACzB,GAAD,CAAL,CAAW0B,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EACGF,IADH,CACQE,IAAI,IAAI;AACZJ,MAAAA,OAAO,CAACI,IAAD,CAAP;AACD,KAHH;AAID,GALQ,EAKN,EALM,CAAT;AAOArC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAAC8B,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BJ,MAAAA,KAAK,CAACzB,GAAD,CAAL,CAAW0B,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EACGF,IADH,CACQE,IAAI,IAAI;AACZJ,QAAAA,OAAO,CAACI,IAAD,CAAP;AACD,OAHH;AAID,KALD;AAMAE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,GARQ,CAAT;AAUA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,IAAI,CAACS,GAAL,CAAS,CAACT,IAAD,EAAOT,KAAP,KAAiBF,WAAW,CAACW,IAAD,EAAOT,KAAP,CAArC,CADH,CADF,CADF;AAQD;;AAED,eAAeQ,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst io = require('socket.io-client');\r\nconst socket = io('http://localhost:8001');\r\n\r\nconst URI = '/api/record/lastrecord'\r\n\r\nconst formatDate = (dateString) => {\r\n  const d = new Date(dateString)\r\n  const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\",\r\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\r\n    \"Aug\", \"Sep\", \"Oct\",\r\n    \"Nov\", \"Dec\"\r\n  ]\r\n  const minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\r\n  return d.getDate() + \"-\" + monthNames[d.getMonth()] + \"-\" + d.getFullYear() + \" \" + d.getHours() + \":\" + minutes\r\n}\r\n\r\nconst displayCard = (dt, index) => {\r\n  return (\r\n    <Col key={index} xs={12} md={6} lg={4}>\r\n      <Card>\r\n        <Link className=\"btn btn-primary\" to={{ pathname: `/graph/${dt.deviceId}` }}>\r\n          <Card.Header>ID: {dt.deviceId} @ {dt.Device.location}</Card.Header>\r\n        </Link>\r\n        <Card.Body>\r\n          <Row>\r\n            <Col>\r\n              <Card.Text>Temperature</Card.Text>\r\n              <Card.Text>{dt.temp}&deg;C</Card.Text>\r\n            </Col>\r\n            <Col>\r\n              <Card.Text>Humidity</Card.Text>\r\n              <Card.Text>{dt.humi}%</Card.Text>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Card.Text className=\"last-update-time\">\r\n                Last update: {formatDate(dt.recordDate)}\r\n              </Card.Text>\r\n\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n\r\n  )\r\n}\r\n\r\nfunction Dashboard() {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => {\r\n    fetch(URI).then(res => res.json())\r\n      .then(json => {\r\n        setData(json)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    socket.on('new_record', () => {\r\n      fetch(URI).then(res => res.json())\r\n        .then(json => {\r\n          setData(json)\r\n        })\r\n    });\r\n    console.log('new_reocrd')\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {data.map((data, index) => displayCard(data, index))}\r\n      </Row>\r\n    </Container>\r\n\r\n  )\r\n}\r\n\r\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}